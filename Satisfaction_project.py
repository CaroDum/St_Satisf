# -*- coding: utf-8 -*-
"""
Created on Wed Jun 15 15:26:46 2022

@author: carol
"""

import streamlit as st
from joblib import dump, load

from streamlit_option_menu import option_menu

from PIL import Image

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import MinMaxScaler
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier 
from sklearn.metrics import accuracy_score 
from sklearn.metrics import classification_report  
#install langdetect
from nltk.stem.snowball import FrenchStemmer  
from langdetect import detect
from  nltk.tokenize import word_tokenize 
import nltk
nltk.download('punkt')
from  nltk.tokenize import PunktSentenceTokenizer  
#install unidecode
from unidecode import unidecode
import re
from nltk.corpus import stopwords
import nltk
nltk.download('stopwords')


with st.sidebar:
    choose = option_menu("Menu", ["Le sujet", "Probl√©matique", "Exploration Donn√©es", "Exploration M√©taDonn√©es","Nuage de mots", "Bag of Words", "M√©thodologie", "Mod√©lisation", "Importantes Features", "Conclusion", "A vous de jouer !","Contact"],
                         icons=['journal', 'wrench adjustable circle', 'clipboard-data','clipboard-plus fill','cloud-check','handbag', 'info-circle','building','reception-4','robot','pencil-square','at'],
                         menu_icon="list", default_index=0,
                         styles={
        "container": {"padding": "5!important", "background-color": "#fadcbd"},
        "icon": {"color": "grey", "font-size": "25px"}, 
        "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#ead1dc"},
        "nav-link-selected": {"background-color": "#ff8100"},
    }
    )

image1 = Image.open('Images/sourire_client.jpg')
image2 = Image.open('Images/customer_satisfaction.jpg')
image3 = Image.open('Images/WordCloud_neg.png')
image4 = Image.open('Images/WordCloud_pos.png')
image5 = Image.open('Images/m√©tadonn√©es.PNG')
image6 = Image.open('Images/df_info.PNG')


df = pd.read_csv('Donn√©es/data_satis.csv')
occurences = pd.read_csv('Donn√©es/occurences.csv', names = ['mot','occurence'])
data_test =  pd.read_csv('Donn√©es/data_test.csv')



if choose == "Le sujet":
    st.title("Projet Customer Satisf'Action")
    st.image(image2, caption="Customer Satisf'Action")
             
    st.markdown('<h2 style="color: black;">Pr√©sentation du sujet</h2>', unsafe_allow_html=True)

    st.write('Pourquoi le sujet de la satisfaction client fait autant parler aujourd‚Äôhui ?')
    st.markdown('Depuis toujours, le client repr√©sente le nerf de la guerre dans les enseignes : **sans client ‚Üí pas de commerce !**')   
    st.write("Les mentalit√©s changent, la vie √©galement : on ne peut plus se permettre de perdre des clients, la fid√©lisation des clients est essentielle √† la bonne sant√© de l'entreprise")
    st.write('La guerre des prix fait rage : si on ne peut plus retenir le client uniquement sur une promo ou un prix, il faut aller le retenir avec les services qu‚Äôon va lui proposer, ')
    st.write('dans leurs diversit√©s, leurs int√©r√™ts et surtout dans leurs qualit√©s ! ')
    st.write('Un service client par ex ouvert 7j/7, c‚Äôest bien, mais si le client obtient une r√©ponse lors du 1er contact, c‚Äôest vraiment mieux üòä  ')
    st.write('D√®s lors se posent plusieurs questions : comment fid√©liser nos clients ? Comment savoir que le client est en train de churner ? Comment le retenir ? **Que pense-t-il vraiment ?  Peut-on le pr√©voir ?**')
    st.write('Voil√† le but de ce projet **Satisf‚ÄôAction !** Car c‚Äôest dans *l‚Äôaction* que qu‚Äôil faut se battre pour √©voquer et imposer la pens√©e **‚Äúclient centric‚Äù**')



elif choose == "Probl√©matique":
    st.image(image2)

    title_container1 = st.container()
    col1, col2 = st.columns([1, 1.2])
    with title_container1:
        with col1:
            st.markdown('<h2 style="color: black;">La probl√©matique</h2>', unsafe_allow_html=True)
        with col2:
            st.image(image1, width=100)


    st.write('Il peut √™tre int√©ressant d‚Äô√©valuer la satisfaction client pour :')
    st.write('‚óè √âtude de qualit√© sur la Supply Chain : probl√®me de conception, livraison, prix non adapt√©, durabilit√©‚Ä¶ ')
    st.write('‚óè √âtudier si le produit/service correspond bien √† l‚Äôattente du march√©. ')
    st.write('‚óè Synth√©tiser les feedback, am√©liorations des clients.  ')
    st.write('‚óè Aider √† la r√©ponse ou √† la redirection des clients insatisfaits...  ')
    st.write('Pour de nombreux produits/services, la satisfaction des clients se mesure sur les commentaires, avis de sites d√©di√©s (Trustpilot, site distributeur, twitter‚Ä¶).')
    st.write('Il est long et fastidieux mais important de lire et analyser les verbatim qui sont essentiels √† la compr√©hension de la satisfaction client, mais en l‚Äôabsence d‚Äôoutils qui permettent de synth√©tiser ces avis, les proc√©d√©s sont g√©n√©ralement par √©chantillonnage.')
    st.write('L‚Äôobjectif de ce projet est donc d‚Äôextraire de l‚Äôinformation de commentaires.  ')
    st.write('Comment pr√©dire la satisfaction d‚Äôun client ? ')
    st.write('A travers le commentaire qu‚Äôil nous a laiss√©, nous allons essayer de pr√©dire sa satisfaction globale (Content / pas content), et tenter de pr√©dire le nombre d‚Äô√©toiles qu‚Äôil va donner √† l‚Äôenseigne.')
    st.write('**--> Nous allons donc mettre en place une mod√©lisation √† travers une classification et une r√©gression.** ')





elif choose == "Exploration Donn√©es":
    st.image(image2)
    st.markdown('<h2 style="color: black;">Notre DataSet</h2>', unsafe_allow_html=True)

    st.write('**Notre jeu de donn√©es de base**')
    
    with st.echo():
        df_base = pd.read_csv("https://assets-datascientest.s3.eu-west-1.amazonaws.com/datasets/reviews_trust.csv")

    st.write('\n ')
    
    @st.cache
    def convert_df(df):
          # IMPORTANT: Cache the conversion to prevent computation on every rerun
        return df.to_csv().encode('utf-8')
    
    csv1 = convert_df(df_base)  
    st.download_button(
        label="T√©l√©charger le fichier (csv)",
        data=csv1,
        file_name='data_satis.csv',
        mime='text/csv',
        key=1,
        )
    
    st.write('\n ')  

    if st.checkbox('Afficher le jeu de donn√©es de base :'):
        st.dataframe(df_base)
        st.write('\n ')
        
        
        
        
    if st.checkbox('Afficher les valeurs manquantes du jdd de base :'):
        st.dataframe(df_base.isna().sum())
    if st.checkbox('Afficher les infos du jeu de donn√©es de base :'):
            st.image(image6)
            st.write('Notre base de donn√©es est compos√©e de peu de variables : 11 au total.')
            image7 = Image.open('Images/descripvariables_base.PNG')
            st.image(image7)
            st.write("Nous remarquons avec les infos ci-dessus que nous avons √©norm√©ment de valeurs manquantes pour les variables : reponse / ville /maj / date_commande / ecart.")
            st.write("Nous pouvons d√©j√† supposer que toutes ne seront pas utiles pour l‚Äôanalyse et la mod√©lisation : en effet, notre objectif est de pr√©dire la note √† l‚Äôaide du commentaire : nous pouvons donc exclure la variable r√©ponse par exemple qui a √©t√© ajout√©e apr√®s l‚Äôobtention de la note (puisque r√©ponse au commentaire")
            st.write("Idem pour les variables client et ville : elles n‚Äôapporteront rien dans l‚Äôanalyse et en plus, il y a beaucoup trop de manquants")

    st.write('\n ')
    st.write('\n ')
    st.write('**Notre jeu de donn√©es retravaill√© et nettoy√©**')
    with st.echo():
        df = pd.read_csv("Donn√©es/data_satis.csv")
        
        
    csv2 = convert_df(df_base)  
    st.download_button(
        label="T√©l√©charger le fichier (csv)",
        data=csv2,
        file_name='data_satis.csv',
        mime='text/csv',
        key=2,
        )
    st.write('\n ') 
    
    if st.checkbox('Afficher le jeu de donn√©es transform√© :'):
        st.dataframe(df)
    if st.checkbox('Afficher les valeurs manquantes du jeu de donn√©es transform√© :'):
        st.dataframe(df.isna().sum())
    if st.checkbox('Afficher les infos du jeu de donn√©es transform√© :'):
        st.dataframe(df.describe().T)
        
        
    st.write('\n ')
    st.write("Nous avons d√ª op√©rer des modifications dans nos donn√©es : en effet, certains commentaires n'√©taient pas en fran√ßais et nous aurions fauss√© notre mod√©lisation en les laissant")
    st.write("De plus, certaines variables √©taient inutiles : elles contenaient trop de valeurs manquantes : nous les avons enlev√©es")
    st.write('Enfin, nous avons cr√©√© des m√©tadonn√©es pour nous aider dans notre mod√©lisation')
    st.write('\n ')
    st.image(image5, caption="Les m√©tadonn√©es cr√©√©es")
    st.write('\n ')
    

    st.markdown('<h6 style="color: black;">La variable STAR</h6>', unsafe_allow_html=True)
    st.write('\n')

    
    if st.checkbox('Afficher les graphes relatifs aux valeurs de star :'):
        image9 = Image.open('Images/graphes_star.png')
        st.image(image9)
        
        st.info('La variable **star**, qui repr√©sente la note, est compos√©e de 5 modalit√©s, allant de 1 √† 5, 1 repr√©sentant la note des clients les plus satisfaits.\n Notons une majorit√© de notes √† 5 (pr√®s de 6000 observations), mais suivie par la modalit√© "1" (la plus basse note) √† 5000 observations. \n Notre "ventre mou" est compos√© des notes moyennes (2 et 3), la note "4" est presque √† 4000 observations. \n ‚Üí on peut en d√©duire que les notes sont soit bonnes voire tr√®s bonnes, soit vraiment tr√®s mauvaises, les notes "2" et "3" √©tant plut√¥t minoritaires.' )     
        st.write('\n ')

    if st.checkbox('Afficher les stats descriptives sur star :'):
        image10 = Image.open("Images/stats_star.JPG")
        st.image(image10)
        st.info('Le calcul de la moyenne nous confirme une note plut√¥t √©lev√©e √† **3.23** / 5.  \n  Et nous constatons que plus 50% des observations ont une note de 4 ou 5 ‚Üí ce qui correspond √† des clients plut√¥t contents !')

    st.write('\n ')
    st.write('\n ')

    st.markdown('<h6 style="color: black;">La variable COMPANY</h6>', unsafe_allow_html=True)
    st.write('\n ')  
    st.write('Comment est compos√©e la variable **company**, qui repr√©sente la ou les enseignes concern√©es par les avis')
    st.write('\n ')  
    if st.checkbox("Afficher l'analyse sur la variable compagny :"):
        image11 = Image.open("Images/graphes_company.png")
        st.image(image11)
        st.info("Nous n'avons que 2 marques dans le fichier : Veepee et ShowRoomPriv√© : 2 sp√©cialistes de la vente √©v√©nementielle en ligne.  \n   Pour rappel, il s‚Äôagit de ventes √©ph√©m√®res sur des produits de grandes marques, avec des r√©ductions importantes pour le client.  \n  Nous pouvons donc comparer ces 2 acteurs, qui ≈ìuvrent dans le m√™me domaine : vente en ligne, aucun magasin, envoi par la poste ou relais.  \n  Notons que VeePee est sous-repr√©sent√© par rapport √† ShowRoomPriv√© avec moins de 3.000 observations pour plus de 14.000 pour ShowRoomPriv√©. (non significatif pour la suite car nous allons mod√©liser le fichier dans son ensemble)")  
    st.write('\n ')  
    st.write('\n ')  


    st.markdown('<h6 style="color: black;">La variable SOURCE</h6>', unsafe_allow_html=True)
    st.write('\n ')  
    st.write("Comment est compos√©e la variable **Source**, qui repr√©sente le ou les sites d'avis d√©pos√©s par les clients")
    st.write('\n ')  
    if st.checkbox("Afficher l'analyse sur la variable source :"):
        image12 = Image.open("Images/graphes_source.png")
        st.image(image12)
        st.info("Notre base de donn√©es est constitu√©e d'avis clients provenant de 2 sites :\n - TrustedShop \n - TrustPilot \n Notons la diff√©rence entre les 2 sites d'avis : Trusted shop : les avis clients sont v√©rifi√©s, ils font suite √† une commande client et pour TrustPilot : ce sont des avis d'internautes, et donc pas forc√©ment v√©rifi√©s.")     
    st.write('\n ')  
    st.write('\n ')  


    st.markdown('<h6 style="color: black;">La variable SOURCE vs COMPANY</h6>', unsafe_allow_html=True)
    st.write('\n ')  
    st.write("Quelle est la r√©partition de la **source** par rapport √† l'enseigne ?")
    st.write('\n ')  
    if st.checkbox("Afficher l'analyse :", key =1):
        image13 = Image.open('Images/sourcerepart.JPG')
        st.image(image13)
        st.info("Aucun commentaire pour VeePee sur le site TrustedShop : ces commentaires proviennent exclusivement du site TrustPilot.  \n  Les commentaires pour ShowRoomPriv√© SRP proviennent en grande majorit√© du site TrustedShop **(83%)** ")     
    st.write('\n ')  
    st.write('\n ')  
    
    
    st.markdown('<h6 style="color: black;">La variable STAR vs COMPANY</h6>', unsafe_allow_html=True)
    st.write('\n ')  
    st.write('Quelle est la r√©partition de la variable **star** par rapport √† nos 2 enseignes ?')
    st.write('\n ')  
    if st.checkbox("Afficher l'analyse :", key =2):
        image15 = Image.open("Images/proportion_note_enseigne.png")
        st.image(image15)
        st.info("√ânorme diff√©rence de notation entre les 2 marques ! Veepee n'a quasiment que des notes = 1, tandis que la distribution pour ShowRoomPriv√© suit la distribution g√©n√©rale vu tout √† l'heure (logique au vu du nombre d‚Äôobservations li√©es √† ShowRoom √©galement !)")  
    st.write('\n ')  
    st.write('\n ')  
    st.write('Quelles sont les stats de la variable **star** par rapport √† nos 2 enseignes ?')
    st.write('\n ')  
    if st.checkbox("Afficher l'analyse :", key =3):
        image16 = Image.open("Images/star_parenseigne.JPG")
        st.image(image16)
        st.info("Confirmation de ce que le graphique pr√©c√©dent nous indiquait : la moyenne pour VeePee est √† **1.46 / 5** pour 3.000 observations, vs **3.61/ 5** pour pr√®s de 14.000 observations pour ShowRoomPriv√©.  \n  --> Les clients VeePee sont clairement beaucoup plus insatisfaits que ceux de ShowRoom !")
    st.write('\n ')  
    st.write('\n ')  

    st.markdown('<h6 style="color: black;">La variable REPONSE</h6>', unsafe_allow_html=True)
    st.write('\n ')  
    st.write('Quelle enseigne r√©pond le plus au client ?')
    st.write('\n ')  
    if st.checkbox("Afficher l'analyse sur la r√©ponse apport√©e:"):
        image17 = Image.open("Images/image17.png")
        st.image(image17)
        st.success("**Variable tr√®s int√©ressante, car elle permet de voir si un client m√©content re√ßoit une r√©ponse de la part de son enseigne. Autrement dit, est-ce que le client re√ßoit une r√©ponse ? quel est le client a qui on r√©pond (m√©content?) ?**")
        st.info("Instructif car nous avons vu pr√©c√©demment que VeePee avait une majorit√© de note √† 1 --> en tant qu‚Äôenseigne, il serait int√©ressant de r√©pondre √† au client et de pouvoir constater ainsi :  \n  d‚Äôune part son m√©contentement et tenter de le r√©soudre, d‚Äôautre part de voir si un probl√®me r√©current n'appara√Æt pas dans les commentaires. \n  Or, dans notre fichier, nous constatons que VeePee ne r√©pond jamais aux clients. ShowRoomPriv√© le fait dans pr√®s d'un cas sur 2. ")  
        st.error("**Remarque** : cette variable ne doit pas √™tre prise en compte pour expliquer la note car elle intervient forc√©ment apr√®s le d√©p√¥t de la note et du commentaire sur le site.  \n  Elle peut en tout cas expliquer une non fid√©lisation des clients. ")
    
    st.write('\n ')  
    st.write('A qui apporte-t-on une r√©ponse ?')
    st.write('\n ')  
    if st.checkbox("Afficher le graphe"):
        image18 = Image.open("Images/star_et_answer.png")
        st.image(image18)
        st.info("Les r√©ponses ne sont pas apport√©es en fonction de la note. Ce qui est √©tonnant car il serait productif de r√©pondre aux clients les plus insatisfaits.  \n  De plus en plus de clients d√©posent des avis sur une multitude de sites, et malgr√© toutes les technologies pour rassembler ces avis sur une seule et m√™me plateforme permettant de r√©pondre plus facilement au client, il est extr√™mement long et co√ªteux pour les enseignes de r√©pondre au commentaire, de fa√ßon personnalis√©e pour tous les clients.  \n  ‚Üí il est judicieux dans ce cas de 'choisir ses combats' et de privil√©gier dans un 1e temps les clients m√©contents pour √©viter leur d√©part et leur non-rachat par la suite")
    st.write('\n ')  
    st.write('\n ')  
 
 
############################################################################################
   

elif choose == "Exploration M√©taDonn√©es":
    st.image(image2)
    st.markdown('<h2 style="color: black;">M√©TADONN√©ES</h2>', unsafe_allow_html=True)
    st.write('\n ') 
    st.write("Objectif de cette partie : nous conforter dans nos id√©es sur le lien entre note et 'aspect' du commentaire. Pour cela, nous avons cr√©√© des ‚Äúm√©tadonn√©es‚Äù --> de nouvelles variables cr√©√©es √† partir du commentaire pour nous aider dans l‚Äôanalyse.") 
    st.write('Rappel :')
    st.write('\n ')
    st.image(image5, caption="Les m√©tadonn√©es cr√©√©es")
    st.write('\n ') 

    st.markdown('<h6 style="color: black;">La m√©tadonn√©e LONGUEUR DU COMMENTAIRE</h6>', unsafe_allow_html=True)
    st.write('\n ')  
    if st.checkbox("en g√©n√©ral, par enseigne et selon les notes donn√©es", key=1):
        image19 = Image.open("Images/long_com_describe.JPG")
        image20 = Image.open("Images/long_com_par_ens.JPG")
        image21 = Image.open("Images/long_com_par_star.JPG")
        
        title_container = st.container()
        col1, col2 = st.columns([1, 1.3])
        with title_container:
            with col1:
                st.image(image19)
            with col2:
                st.image(image20)
        
 

        st.info("Si on regarde la longueur du commentaire, nous n‚Äôapprenons pas grand-chose. On peut se dire qu‚Äôils sont de longueur variable, avec des petits et de tr√®s longs commentaires.  \n  Si on compare les longueurs des commentaires entre les enseignes, cela devient int√©ressant --> les commentaires chez VeePee sont nettement plus longs que ceux chez ShowRoom : serait-ce le signe d‚Äôun client plus m√©content ?")
        st.write('\n ') 

        st.image(image21)
        st.write('\n ') 
        st.info("Clairement, les commentaires des clients les plus m√©contents sont plus longs, et au plus le client est content, au plus son commentaire est court ! ")
    st.write('\n ') 
    st.write('\n ') 
    st.markdown('<h6 style="color: black;">La m√©tadonn√©e MOT NEGATIF</h6>', unsafe_allow_html=True)
    st.write('\n ') 
    st.success('**Pour cette donn√©e, nous avons construit une liste de mots dits "n√©gatifs" (ex : nul, d√©teste, jamais, voleur...) et nous avons regard√© ensuite si dans notre commentaire, se trouvaient ces mots.  \n  (m√©thode utilis√©e pour organiser le flux des mails dans certaines enseignes et en acc√©l√©rer le traitement**')
    st.write('\n ')  

    if st.checkbox("en g√©n√©ral, par enseigne et selon les notes donn√©es", key=2):
        image22 = Image.open("Images/mots_neg_describe.JPG")
        image23 = Image.open("Images/mots_neg_par_ens.JPG")
        image24 = Image.open("Images/mots_neg_par_star.JPG")
        
        title_container = st.container()
        col1, col2 = st.columns([1, 1.3])
        with title_container:
            with col1:
                st.image(image22)
            with col2:
                st.image(image23)
        
        
        st.info("Logiquement, nous voyons que plus la note est basse, plus le nombre de mots n√©gatifs est √©lev√©.  De m√™me, quand on regarde la diff√©rence entre les 2 enseignes, on voit qu'en moyenne, le nombre de mots n√©gatifs est plus √©lev√© chez VeePee que chez ShowRoom. ")
        st.image(image24)
        st.info("Quand on regarde la diff√©renciation sur note et enseigne, le nombre de mots n√©gatifs diminue bien en fonction de l'augmentation de la note, et ce quelle que soit l'enseigne !")
    st.write('\n ') 
    st.write('\n ') 

    st.markdown('<h6 style="color: black;">La m√©tadonn√©e POINT EXCL / INTERR</h6>', unsafe_allow_html=True)
    st.write('\n ') 
    if st.checkbox("en g√©n√©ral, par enseigne et selon les notes donn√©es", key=3):
        st.write('\n ') 
        image25 = Image.open("Images/image25.JPG") #nb pts describe
        image26 = Image.open("Images/image26.JPG") #tc nb_pt / star
        ptsparstar = Image.open("Images/ptsparstar.JPG") #nb pts par star
        ptsparens = Image.open("Images/ptspar_ens.JPG") # nb pts par enseigne

        st.image(image25)
        st.image(image26)

        st.info("En moyenne, une 'zone de point' par commentaire ... mais √ßa monte jusque 64 !  \n  Le tableau crois√© nous indique que pour les donn√©es les plus √©lev√©es de cette variable, la note est toujours √† 1.  \n  En revanche, quand il n'y a pas de zone de ponctuation d√©tect√©e, la note est bonne ou tr√®s bonne (4 ou 5) dans pr√®s de 2 cas sur 3.")
        st.write('\n')
        st.write('\n')
        title_container = st.container()
        col1, col2 = st.columns([1, 1.3])
        with title_container:
            with col1:
                st.image(ptsparstar)
            with col2:
                st.image(ptsparens)
        st.info("Comme pour la variable ‚Äúmot_neg‚Äù, la tendance est similaire pour la variable 'nb_pt'' : en moyenne, nous avons plus de 'zone de points' chez VeePee que chez ShowRoom.  \n  Et le nombre de points diminue au fur et √† mesure que la note monte, quel que soit l'enseigne consid√©r√©e.")
   

#################################################################################

elif choose == "Nuage de mots":
    st.image(image2)
    st.markdown('<h2 style="color: black;">Nuage de mots</h2>', unsafe_allow_html=True)
    st.write('\n ')
    st.write('Dans cette partie, nous allons pouvoir visualiser les mots les plus utilis√©s dans les commentaires, selon que le client soit plut√¥t content ou m√©content')
    st.write('Les clients **"contents"** sont les clients qui ont mis la note de **4 ou de 5**')
    st.write('Les clients **"m√©contents"** sont ceux qui ont not√© **entre 1 et 3** inclus')
    st.write('\n ')

        
    if st.checkbox('Afficher le nuage de mots "clients contents" :'):
        st.image(image4, caption="Nuage de Mots 'Clients Contents'")
        st.info("Il y a **67576** mots dans l'ensemble des commentaires clients 'contents")

        st.write('\n ')
    if st.checkbox('Afficher le nuage de mots "clients m√©contents" :'):
        st.image(image3, caption="Nuage de Mots 'Clients M√©contents'")
        st.info("Il y a **273905** mots dans l'ensemble des commentaires clients 'm√©contents") 
    st.write('\n ')
    st.write('\n ')     
    
    st.write("Vous avez maintenant la possibilit√© de visualiser le nuage de mots li√©s aux diff√©rentes typologies de clients, c'est √† dire, voir les mots utilis√©s par les clients, en fonction de la note qu'ils ont donn√©s")
    st.write('\n ')     

    nuage = st.selectbox(
     'Quel nuage souhaitez vous visualiser ?',
     ('les mots li√©s √† la note 1', 'les mots li√©s √† la note 2', 'les mots li√©s √† la note 3','les mots li√©s √† la note 4','les mots li√©s √† la note 5'))
    if nuage == 'les mots li√©s √† la note 1':
        nuage1 = Image.open("Images/nuage1.png")
        st.image(nuage1)
    if nuage == 'les mots li√©s √† la note 2':
        nuage2 = Image.open("Images/nuage2.png")
        st.image(nuage2)
    if nuage == 'les mots li√©s √† la note 3':
         nuage3 = Image.open("Images/nuage3.png")
         st.image(nuage3)
    if nuage == 'les mots li√©s √† la note 4':
        nuage4 = Image.open("Images/nuage4.png")
        st.image(nuage4)
    if nuage == 'les mots li√©s √† la note 5':
        nuage5 = Image.open("Images/nuage5.png")
        st.image(nuage5)         
        
        
        
        

  
    
  
###############################################################################        
    
elif choose == "Bag of Words":
    st.image(image2)
    st.markdown('<h2 style="color: black;">Bag of Words</h2>', unsafe_allow_html=True)
    st.write('\n ')
    st.write("Voir les mots utilis√©s par les clients et les d√©nombrer : voil√† l'objectif de cette partie")
    st.write('\n ')
    st.write('\n ')
    if st.checkbox('Afficher le tableau entier des occurences :'):
        st.dataframe(occurences)
   
    
    nb = st.slider('Choix du nombre de mots que vous voulez afficher :', 1, 150, 25)
    st.write('\n ')
    st.write('Voici le tableau des ',nb,'mots les plus utilis√©s par les clients, avec leur occurence :')
    occ =  occurences.sort_values(by = ['occurence'], ascending = False).head(nb)
    st.dataframe(occ)
   
    
   
########################################################################



elif choose == "M√©thodologie":
    st.image(image2)
    st.markdown('<h2 style="color: black;">M√©thodologie</h2>', unsafe_allow_html=True)
    st.write('\n')
    st.write('Les commentaires des clients laiss√©s apr√®s la r√©ception de la commande va permettre au site de faire parler de lui : c‚Äôest la **e-r√©putation**.')
    st.write('Mieux et moins chers qu‚Äôune campagne publicitaire ou que des offres envoy√©es par ciblage client, les commentaires et avis client sont essentiels aux commerces (en ligne et /ou en physique). D‚Äôailleurs, 88% des individus consultent des avis de consommateurs, des forums ou des blogs (dont 44 % ¬´ souvent ¬ª)')
    st.write('voir : "L‚Äôimpact de l‚Äôe-r√©putation sur le processus d‚Äôachat - IFOP : https://www.ifop.com/publication/limpact-de-le-reputation-sur-le-processus-dachat/ ')
    st.write('\n')
               
    st.write('\n')
    
    st.write('Notre but est donc d‚Äôarriver √† pr√©dire la satisfaction de notre client en fonction du commentaire laiss√© sur les sites d‚Äôavis. ')
    st.write('--> ainsi, sur des sites autres que avis de consommateurs, nous pourrons pr√©dire la satisfaction de nos clients, et pr√©dire par exemple, quel client sera le + fid√®le (int√©gration d‚Äôun programme d‚Äôambassadeurs de la marque) ou pr√©dire les clients ‚Äúchurners‚Äù pour lui adresser une offre ou une communication particuli√®re ! ')
    st.write(' La mod√©lisation consiste √† appliquer des algorithmes de classification : un client appartient soit √† une classe 1 (le client est satisfait) soit √† une classe 0 (client non satisfait). ')
    st.write('\n')
    st.write('Le processus de la mod√©lisation se d√©compose en quatre √©tapes :')
    image100 = Image.open("Images/etapes_modelisa.JPG")
    st.image(image100)
    st.write('\n')

    st.write('Nous avons choisi pour commencer des mod√®les de classification ‚Äúclassiques‚Äù : **R√©gression Logistique**, **Decision Tree Classifier** et **Gradient Boosting Classifier**, que nous allons utiliser avec et sans nos m√©tadonn√©es cr√©√©es sp√©cialement.  \n  Ensuite, nous nous pencherons sur une tentative de mod√©lisation lin√©aire mais en nous basant sur la variable Star directement, avec en mod√®les : **R√©gression Lin√©aire**, **Decision Tree Regressor** et **Gradient Boosting Regressor**, toujours avec et sans m√©tadonn√©es.')
    st.write('\n')

    st.markdown('<h5 style="color: black;">Pr√©paration des donn√©es</h5>', unsafe_allow_html=True)
    st.write('\n')
    st.write("___1. Nettoyage du fichier :___  \n  But : Enlever les variables inutiles / les valeurs manquantes, afin de ne pas alourdir le fichier et ainsi all√©ger le temps de traitement. Nous ne gardons que les variables utiles pour la mod√©lisation : ")
    image101 = Image.open("Images/image101.JPG")
    st.image(image101)
    st.write('Et nous √©liminons √©galement les lignes o√π il n‚Äôy a pas de commentaires.')
    st.write('\n')
    st.write('\n')

    
    st.write("___2. Cr√©ation des s√©ries pour les mod√®les :___")
    st.write("Pour la classification binaire, nous cr√©ons 3 s√©ries :  \n  - une S√©rie **Xmeta** contenant le Commentaire et les m√©tadonn√©es.  \n  - une S√©rie **Xcom** contenant uniquement la colonne 'Commentaire'.  \n  - une S√©rie y contenant la colonne **target**.")
    st.write('Pour la classification MultiTarget (r√©gression lin√©aire), nous cr√©ons √©galement 3 s√©ries :  \n  - une S√©rie **Xmeta** contenant le Commentaire et les m√©tadonn√©es.  \n  - une S√©rie **Xcom** contenant uniquement la colonne "Commentaire".  \n  - une S√©rie y contenant la colonne **star** ')
    st.write('_(dans un souci de clart√©, nous avons cr√©√© des tableaux diff√©rents pour chaque type de mod√©lisation_')
    st.write('\n')
    st.write('\n')

    
    st.write("___3. Cr√©ation des jeux de donn√©es de test et d'entra√Ænement___")
    st.write("A partir de nos s√©ries, nous cr√©ons des jeux d'entra√Ænement et de test, avec une taille de jeu de test correspondant √† **20%** des donn√©es au total.  \n  _Toujours dans le souci de clart√© et pour ne pas surcharger et trop utiliser le m√™me jeu d'entra√Ænement, nous cr√©ons diff√©rents jeux de train / test pour les appliquer √† nos diff√©rents mod√®les √† tester._")
    st.write('\n')
    st.write('\n')
    st.write("___4. Cr√©ation de nos Pipelines___")
    st.write("Pour notre mod√®le avec m√©tadonn√©es, nous avions un probl√®me sur la vectorisation : Il fallait vectoriser notre commentaire, puis ensuite le ‚Äúraccrocher‚Äù √† nos m√©tadonn√©es   \n  ‚Üí risque d‚Äôerreur et difficult√©s accrues ! ")
    st.write("Nous avons mis en place une Pipeline, qui va nous permettre de traiter nos donn√©es textuelles et de mod√©liser avec nos m√©tadonn√©es, beaucoup plus facilement. Cette pipeline va traiter en parall√®le la vectorisation du commentaire, la normalisation des autres donn√©es, enfin, le lancement de la mod√©lisation.  \n  _La Pipeline sera sur 2 ‚Äústeps‚Äù : 'vectorizer' & 'scaler' / 'model'_")    
    st.write('\n')
    st.write('\n')
    st.write('Maintenant : place √† la  mod√©lisation :sunglasses:!')
  
    
  ########################################################################


elif choose == "Mod√©lisation":
      st.image(image2)
      st.markdown('<h2 style="color: black;">Mod√©lisation</h2>', unsafe_allow_html=True)
      st.write('\n')
      st.write('__Vous trouverez ci-dessous les r√©sultats de la mod√©lisation de nos mod√®les test√©s__')
      st.write('\n')
      
      type_mod = st.radio(
     "Quelle type de mod√©lisation voulez-vous tester ?",
     ('R√©gression', 'Classification'))
      if type_mod == 'R√©gression' :
          m√©ta = st.radio(
         "le mod√®le contient-il des m√©tadonn√©es ?",
         ('Sans m√©tadonn√©es', 'Avec m√©tadonn√©es'))
          if m√©ta == 'Sans m√©tadonn√©es':
              mod = st.radio(
             "Quel mod√®le voulez-vous tester ?",
             ('R√©gression lin√©aire', 'Decision Tree Regressor','Gradient Boosting Regressor'),index=1)
              if mod == 'R√©gression lin√©aire':
                  image220 = Image.open("Images/Modelisation/image220.JPG") #reg lin ss m
                  image221 = Image.open("Images/Modelisation/image221.JPG") #cm reg lin ss m
                  image227 = Image.open("Images/image227.jpg")  
     
                  title_container = st.container()
                  col1, col2 = st.columns([1, 10])
                  with title_container:
                      with col1:
                          st.image(image227,width = 50)
                          st.write('\n')
                          with col2:
                              st.write('_Pour ce mod√®le, les ‚Äúpr√©dictions‚Äù ont √©t√© reclass√©es sur la bonne √©chelle pour les comparaisons. (c‚Äôest √† dire  : toutes les sorties inf√©rieures √† 1 ont √©t√© reclass√©es dans le ‚Äú1‚Äù,  toutes les sorties > √† 5 ont √©t√© reclass√©es dans le ‚Äú5‚Äù_')
                  st.write('\n')
                  st.write('\n')
                  if st.checkbox('Afficher le rapport de classification :', key = 7):
                      st.image(image220)
                  if st.checkbox('Afficher la matrice de confusion :', key = 7):
                      st.image(image221)
              st.write('\n ')
              if mod == 'Decision Tree Regressor':
                  image222 = Image.open("Images/Modelisation/image222.JPG") #DTR ss m
                  image223 = Image.open("Images/Modelisation/image223.JPG") #cm DTR ss m

                  if st.checkbox('Afficher le rapport de classification :', key = 8):
                      st.image(image222)
                  if st.checkbox('Afficher la matrice de confusion :', key = 8):
                      st.image(image223)
                  st.write('\n ')
                  st.write('\n ')    

              if mod == 'Gradient Boosting Regressor':
                  image224 = Image.open("Images/Modelisation/image224.JPG") #GBR ss m
                  image225 = Image.open("Images/Modelisation/image225.JPG") #cm GBR ss m

                  if st.checkbox('Afficher le rapport de classification :', key = 9):
                      st.image(image224)
                  if st.checkbox('Afficher la matrice de confusion :', key =9):
                      st.image(image225)
          if m√©ta == 'Avec m√©tadonn√©es':
              mod = st.radio(
             "Quel mod√®le voulez-vous tester ?",
             ('R√©gression lin√©aire', 'Decision Tree Regressor','Gradient Boosting Regressor'),index=1)
              if mod == 'R√©gression lin√©aire':
                  image230 = Image.open("Images/Modelisation/image230.JPG") #reg lin av m
                  image231 = Image.open("Images/Modelisation/image231.JPG") #cm reg lin av m
                  image227 = Image.open("Images/image227.jpg")
                  title_container = st.container()
                  col1, col2 = st.columns([1, 10])
                  with title_container:
                      with col1:
                          st.image(image227,width = 50)
                          st.write('\n')
                      with col2:
                          st.write('_Pour ce mod√®le, les ‚Äúpr√©dictions‚Äù ont √©t√© reclass√©es sur la bonne √©chelle pour les comparaisons. (c‚Äôest √† dire  : toutes les sorties inf√©rieures √† 1 ont √©t√© reclass√©es dans le ‚Äú1‚Äù,  toutes les sorties > √† 5 ont √©t√© reclass√©es dans le ‚Äú5‚Äù_')
                  st.write('\n')
                 
                  if st.checkbox('Afficher le rapport de classification :', key = 10):
                      st.image(image230)
                  if st.checkbox('Afficher la matrice de confusion :', key = 10):
                      st.image(image231)

              if mod == 'Gradient Boosting Regressor':
                  image234 = Image.open("Images/Modelisation/image234.JPG") #GBR av m
                  image235 = Image.open("Images/Modelisation/image235.JPG") #cm GBR av m

                  if st.checkbox('Afficher le rapport de classification :', key = 12):
                      st.image(image234)
                  if st.checkbox('Afficher la matrice de confusion :', key = 12):
                      st.image(image235)
                      
              if mod == 'Decision Tree Regressor':
                  image232 = Image.open("Images/Modelisation/image232.JPG") #DTR av m
                  image233 = Image.open("Images/Modelisation/image233.JPG") #cm DTR av m

                  if st.checkbox('Afficher le rapport de classification :', key = 11):
                      st.image(image232)
                  if st.checkbox('Afficher la matrice de confusion :', key = 11):
                      st.image(image233)

      if type_mod == 'Classification' :
           m√©ta = st.radio(
          "le mod√®le contient-il des m√©tadonn√©es ?",
          ('Sans m√©tadonn√©es', 'Avec m√©tadonn√©es'))
           if m√©ta == 'Sans m√©tadonn√©es':
               mod = st.radio(
              "Quel mod√®le voulez-vous tester ?",
              ('R√©gression Logistique', 'Decision Tree Classifier','Gradient Boosting Classifier'),index=1)
               if mod == 'R√©gression Logistique':
                   image200 = Image.open("Images/Modelisation/image200.JPG") #reg log ss m
                   image201 = Image.open("Images/Modelisation/image201.JPG") #cm reg log ss m

                   if st.checkbox('Afficher le rapport de classification :', key = 1):
                       st.image(image200)
                   if st.checkbox('Afficher la matrice de confusion :', key = 1):
                       st.image(image201)
  
               if mod == 'Decision Tree Classifier':
                   image202 = Image.open("Images/Modelisation/image202.JPG") #DTC ss m
                   image203 = Image.open("Images/Modelisation/image203.JPG") #cm DTC ss m

                   if st.checkbox('Afficher le rapport de classification :', key = 2):
                       st.image(image202)
                   if st.checkbox('Afficher la matrice de confusion :', key = 2):
                       st.image(image203)
 
               if mod == 'Gradient Boosting Classifier':
                   image204 = Image.open("Images/Modelisation/image204.JPG") #GBC ss m
                   image205 = Image.open("Images/Modelisation/image205.JPG") #cm GBC ss m

                   if st.checkbox('Afficher le rapport de classification :', key = 3):
                       st.image(image204)
                   if st.checkbox('Afficher la matrice de confusion :', key = 3):
                       st.image(image205)

           if m√©ta == 'Avec m√©tadonn√©es':
               mod = st.radio(
              "Quel mod√®le voulez-vous tester ?",
              ('R√©gression Logistique', 'Decision Tree Classifier','Gradient Boosting Classifier'),index=1)
               if mod == 'R√©gression Logistique':
                  image210 = Image.open("Images/Modelisation/image210.JPG") #reg log av m
                  image211 = Image.open("Images/Modelisation/image211.JPG") #cm reg log av m

                  if st.checkbox('Afficher le rapport de classification :', key = 4):
                      st.image(image210)
                  if st.checkbox('Afficher la matrice de confusion :', key = 4):
                      st.image(image211)
                      
               if mod == 'Decision Tree Classifier':
                   image212 = Image.open("Images/Modelisation/image212.JPG") #DTC av m
                   image213 = Image.open("Images/Modelisation/image213.JPG") #cm DTC av m

                   if st.checkbox('Afficher le rapport de classification :', key = 2):
                       st.image(image212)
                   if st.checkbox('Afficher la matrice de confusion :', key = 2):
                       st.image(image213)

               if mod == 'Gradient Boosting Classifier':
                   image214 = Image.open("Images/Modelisation/image214.JPG") #GBC av m
                   image215 = Image.open("Images/Modelisation/image215.JPG") #cm GBC av m

                   if st.checkbox('Afficher le rapport de classification :', key = 3):
                       st.image(image214)
                   if st.checkbox('Afficher la matrice de confusion :', key = 3):
                       st.image(image215)
      
        
      
      st.write('\n ')
      st.write('\n ')
      st.write('\n ')

      st.write("__R√©cap, analyse et commentaires__")
      col1, col2 = st.columns(2)
      
      with col1:
          st.write("____")
          st.write("___Classification___ ")

          if st.checkbox('Afficher tableau r√©cap + commentaires sur les 3 mod√®les de classification sans m√©tadonn√©es :', key = 1):
              image206 = Image.open("Images/Modelisation/image206.JPG")  # resum_class_ssm
              st.image(image206)
              st.info('Nous avons d√©j√† de tr√®s bons r√©sultats √† partir de ces 3 mod√®les qui en plus n‚Äôutilisent pas les m√©tadonn√©es cr√©√©es.  \n  Le meilleur est le Reg Log, suivi par le Gradient Boosting.  \n  Le mod√®le Decision Tree est le moins performant.')
              st.write('\n ')  
            
          if st.checkbox('Afficher tableau r√©cap + commentaires sur les 3 mod√®les de classification avec m√©tadonn√©es :', key = 2):
              image216 = Image.open("Images/Modelisation/image216.JPG")  # resum_class_avm
              st.image(image216)
              st.info('Le seul mod√®le qui s‚Äôam√©liore avec les m√©tadonn√©es est le Gradient Boosting. Le Log Reg reste tr√®s haut, mais avec un F1 Score et un score d‚Äôaccuracy en tr√®s l√©g√®re baisse.')
              st.write('\n ')  
    
      with col2:
          st.write("____")
          st.write("___Pr√©diction de score : r√©gression___")

      
          if st.checkbox('Afficher tableau r√©cap + commentaires sur les 3 mod√®les de r√©gression (pr√©diction de score) sans m√©tadonn√©es :', key = 1):
              image226 = Image.open("Images/Modelisation/image226.JPG")  # resum_class_ssm
              st.image(image226)
              st.info('Nous notons des scores tr√®s faibles par rapport √† ce qu‚Äôon a pu obtenir sur la classification. Le meilleur mod√®le ici est le **Decision Tree** , mais avec une Accuracy √† seulement **0.56 !**  \n   Le Lin Reg a un score tr√®s moyen : on remarque qu‚Äôil classe assez bien les notes extr√™mes : **le 1 √† 64%** et **le 5 √† 70%**, mais le reste n‚Äôest pas reconnu. (mais peut- √™tre est-ce d√ª √† notre ‚Äúreclassement‚Äù ?)  \n  Pour le GradientBoostingReg, le comportement pour le classement du 1 est similaire au hasard, et pour le reste c‚Äôest encore moins bon : on pourrait presque en d√©duire que si ce mod√®le pr√©dit un 2, alors c‚Äôest tout sauf un 2 qui va sortir !')

          st.write('\n ')  
            
          if st.checkbox('Afficher tableau r√©cap + commentaires sur les 3 mod√®les de r√©gression (pr√©diction de score) avec m√©tadonn√©es :', key = 2):
              image236 = Image.open("Images/Modelisation/image236.JPG")  # resum_class_avm
              st.image(image236)
              st.info('Aucune am√©lioration pour le Lin Reg.  \n  Le Gradient Boosting s‚Äôam√©liore tr√®s (trop) l√©g√®rement avec l‚Äôajout des m√©tadonn√©es.  \  Pas d‚Äôam√©lioration ni d√©t√©rioration pour le Decision Tree Regressor.  \n  En r√©sum√© : les mod√®les ne sont pas meilleurs avec les m√©tadonn√©s')
              st.write('\n ')  
              st.write('\n ')  
          

   
########################################################################


elif choose == "Mod√©lisation2":
    st.image(image2)
    st.markdown('<h2 style="color: black;">Mod√©lisation</h2>', unsafe_allow_html=True)


    st.markdown('<h5 style="color: black;">Mod√®le de classification sans m√©tadonn√©es</h5>', unsafe_allow_html=True)
    st.write('\n')
    
    st.write("___1. Logistic Regression sans m√©tadonn√©es___ ")
    image200 = Image.open("Images/Modelisation/image200.JPG") #reg log ss m
    image201 = Image.open("Images/Modelisation/image201.JPG") #cm reg log ss m

    if st.checkbox('Afficher le rapport de classification :', key = 1):
        st.image(image200)
    if st.checkbox('Afficher la matrice de confusion :', key = 1):
        st.image(image201)
    st.write('\n ')
    st.write('\n ')


    st.write("___2. Decision Tree Classifier sans m√©tadonn√©es___ ")
    image202 = Image.open("Images/Modelisation/image202.JPG") #DTC ss m
    image203 = Image.open("Images/Modelisation/image203.JPG") #cm DTC ss m

    if st.checkbox('Afficher le rapport de classification :', key = 2):
        st.image(image202)
    if st.checkbox('Afficher la matrice de confusion :', key = 2):
        st.image(image203)
    st.write('\n ')
    st.write('\n ')    
   
    
    st.write("___3. Gradient Boosting Classifier sans m√©tadonn√©es___ ")
    image204 = Image.open("Images/Modelisation/image204.JPG") #GBC ss m
    image205 = Image.open("Images/Modelisation/image205.JPG") #cm GBC ss m

    if st.checkbox('Afficher le rapport de classification :', key = 3):
        st.image(image204)
    if st.checkbox('Afficher la matrice de confusion :', key = 3):
        st.image(image205)
    st.write('\n ')
    st.write('\n ')    
    
    
    if st.checkbox('Afficher tableau r√©cap + commentaires sur ces 3 mod√®les :', key = 1):
        image206 = Image.open("Images/Modelisation/image206.JPG")  # resum_class_ssm
        st.image(image206)
        st.info('Nous avons d√©j√† de tr√®s bons r√©sultats √† partir de ces 3 mod√®les qui en plus n‚Äôutilisent pas les m√©tadonn√©es cr√©√©es.  \n  Le meilleur est le Reg Log, suivi par le Gradient Boosting.  \n  Le mod√®le Decision Tree est le moins performant.')

    st.write('\n ')
    st.write('\n ')  
    
## ----------------------------------------------##
   
    st.markdown('<h5 style="color: black;">Mod√®le de classification avec m√©tadonn√©es</h5>', unsafe_allow_html=True)
    st.write('\n')
    
    st.write("___1. Logistic Regression avec m√©tadonn√©es___ ")
    image210 = Image.open("Images/Modelisation/image210.JPG") #reg log av m
    image211 = Image.open("Images/Modelisation/image211.JPG") #cm reg log av m

    if st.checkbox('Afficher le rapport de classification :', key = 4):
        st.image(image210)
    if st.checkbox('Afficher la matrice de confusion :', key = 4):
        st.image(image211)
    st.write('\n ')
    st.write('\n ')


    st.write("___2. Decision Tree Classifier avec m√©tadonn√©es___ ")
    image212 = Image.open("Images/Modelisation/image212.JPG") #DTC av m
    image213 = Image.open("Images/Modelisation/image213.JPG") #cm DTC av m

    if st.checkbox('Afficher le rapport de classification :', key = 5):
        st.image(image212)
    if st.checkbox('Afficher la matrice de confusion :', key = 5):
        st.image(image213)
    st.write('\n ')
    st.write('\n ')    
   
    
    st.write("___3. Gradient Boosting Classifier sans m√©tadonn√©es___ ")
    image214 = Image.open("Images/Modelisation/image214.JPG") #GBC av m
    image215 = Image.open("Images/Modelisation/image215.JPG") #cm GBC av m

    if st.checkbox('Afficher le rapport de classification :', key = 6):
        st.image(image214)
    if st.checkbox('Afficher la matrice de confusion :', key =6):
        st.image(image215)
    st.write('\n ')
    st.write('\n ')    
    
    
    if st.checkbox('Afficher tableau r√©cap + commentaires sur ces 3 mod√®les :', key = 2):
        image216 = Image.open("Images/Modelisation/image216.JPG")  # resum_class_avm
        st.image(image216)
        st.info('Le seul mod√®le qui s‚Äôam√©liore avec les m√©tadonn√©es est le Gradient Boosting. Le Log Reg reste tr√®s haut, mais avec un F1 Score et un score d‚Äôaccuracy en tr√®s l√©g√®re baisse.')

        
### --------------------------------------------------------------------- ###

    st.markdown('<h5 style="color: black;">Mod√®le de r√©gression : pr√©diction de score sans m√©tadonn√©es</h5>', unsafe_allow_html=True)
    st.write('\n')
    st.success('**Remarque : Pour effectuer ce type de mod√©lisation, toutes les ‚Äúpr√©dictions‚Äù de ses mod√®les ont d√ª √™tre arrondies √† l‚Äôentier pr√®s pour pouvoir √©tablir la comparaison.**')
    st.write('\n')
    
    st.write("___1. Linear Regression sans m√©tadonn√©es___ ")
    image220 = Image.open("Images/Modelisation/image220.JPG") #reg lin ss m
    image221 = Image.open("Images/Modelisation/image221.JPG") #cm reg lin ss m
    image227 = Image.open("Images/image227.jpg")
    
    
    title_container = st.container()
    col1, col2 = st.columns([1, 10])
    with title_container:
        with col1:
            st.image(image227,width = 50)
            st.write('\n')
        with col2:
            st.write('_Pour ce mod√®le, les ‚Äúpr√©dictions‚Äù ont √©t√© reclass√©es sur la bonne √©chelle pour les comparaisons. (c‚Äôest √† dire  : toutes les sorties inf√©rieures √† 1 ont √©t√© reclass√©es dans le ‚Äú1‚Äù,  toutes les sorties > √† 5 ont √©t√© reclass√©es dans le ‚Äú5‚Äù_')
    st.write('\n')
    
    
    st.write('\n')
    if st.checkbox('Afficher le rapport de classification :', key = 7):
        st.image(image220)
    if st.checkbox('Afficher la matrice de confusion :', key = 7):
        st.image(image221)
    st.write('\n ')
    st.write('\n ')


    st.write("___2. Decision Tree Classifier sans m√©tadonn√©es___ ")
    image222 = Image.open("Images/Modelisation/image222.JPG") #DTR ss m
    image223 = Image.open("Images/Modelisation/image223.JPG") #cm DTR ss m

    if st.checkbox('Afficher le rapport de classification :', key = 8):
        st.image(image222)
    if st.checkbox('Afficher la matrice de confusion :', key = 8):
        st.image(image223)
    st.write('\n ')
    st.write('\n ')    
   
    
    st.write("___3. Gradient Boosting Regressor sans m√©tadonn√©es___ ")
    image224 = Image.open("Images/Modelisation/image224.JPG") #GBR ss m
    image225 = Image.open("Images/Modelisation/image225.JPG") #cm GBR ss m

    if st.checkbox('Afficher le rapport de classification :', key = 9):
        st.image(image224)
    if st.checkbox('Afficher la matrice de confusion :', key =9):
        st.image(image225)
    st.write('\n ')
    st.write('\n ')    
    
    
    if st.checkbox('Afficher tableau r√©cap + commentaires sur ces 3 mod√®les :', key = 3):
        image226 = Image.open("Images/Modelisation/image226.JPG")  # resum_class_ssm
        st.image(image226)
        st.info('Nous notons des scores tr√®s faibles par rapport √† ce qu‚Äôon a pu obtenir sur la classification. Le meilleur mod√®le ici est le **Decision Tree** , mais avec une Accuracy √† seulement **0.56 !**  \n   Le Lin Reg a un score tr√®s moyen : on remarque qu‚Äôil classe assez bien les notes extr√™mes : **le 1 √† 64%** et **le 5 √† 70%**, mais le reste n‚Äôest pas reconnu. (mais peut- √™tre est-ce d√ª √† notre ‚Äúreclassement‚Äù ?)  \n  Pour le GradientBoostingReg, le comportement pour le classement du 1 est similaire au hasard, et pour le reste c‚Äôest encore moins bon : on pourrait presque en d√©duire que si ce mod√®le pr√©dit un 2, alors c‚Äôest tout sauf un 2 qui va sortir !')

    st.write('\n ')
    st.write('\n ')  

## ----------------------------------------------##
   
    st.markdown('<h5 style="color: black;">Mod√®le de r√©gression : pr√©diction de score avec m√©tadonn√©es</h5>', unsafe_allow_html=True)
    st.write('\n')
    st.success('**Remarque : Pour effectuer ce type de mod√©lisation, toutes les ‚Äúpr√©dictions‚Äù de ses mod√®les ont d√ª √™tre arrondies √† l‚Äôentier pr√®s pour pouvoir √©tablir la comparaison.**')
    st.write('\n')

    st.write("___1. Linear Regression avec m√©tadonn√©es___ ")
    
    image230 = Image.open("Images/Modelisation/image230.JPG") #reg lin av m
    image231 = Image.open("Images/Modelisation/image231.JPG") #cm reg lin av m

    title_container = st.container()
    col1, col2 = st.columns([1, 10])
    with title_container:
        with col1:
            st.image(image227,width = 50)
            st.write('\n')
        with col2:
            st.write('_Pour ce mod√®le, les ‚Äúpr√©dictions‚Äù ont √©t√© reclass√©es sur la bonne √©chelle pour les comparaisons. (c‚Äôest √† dire  : toutes les sorties inf√©rieures √† 1 ont √©t√© reclass√©es dans le ‚Äú1‚Äù,  toutes les sorties > √† 5 ont √©t√© reclass√©es dans le ‚Äú5‚Äù_')
    st.write('\n')
   
    if st.checkbox('Afficher le rapport de classification :', key = 10):
        st.image(image230)
    if st.checkbox('Afficher la matrice de confusion :', key = 10):
        st.image(image231)
    st.write('\n ')
    st.write('\n ')


    st.write("___2. Decision Tree Regressor avec m√©tadonn√©es___ ")
    image232 = Image.open("Images/Modelisation/image232.JPG") #DTR av m
    image233 = Image.open("Images/Modelisation/image233.JPG") #cm DTR av m

    if st.checkbox('Afficher le rapport de classification :', key = 11):
        st.image(image232)
    if st.checkbox('Afficher la matrice de confusion :', key = 11):
        st.image(image233)
    st.write('\n ')
    st.write('\n ')    
   
    
    st.write("___3. Gradient Boosting Regressor avec m√©tadonn√©es___ ")
    image234 = Image.open("Images/Modelisation/image234.JPG") #GBR av m
    image235 = Image.open("Images/Modelisation/image235.JPG") #cm GBR av m

    if st.checkbox('Afficher le rapport de classification :', key = 12):
        st.image(image234)
    if st.checkbox('Afficher la matrice de confusion :', key = 12):
        st.image(image235)
    st.write('\n ')
    st.write('\n ')    
    
    
    if st.checkbox('Afficher tableau r√©cap + commentaires sur ces 3 mod√®les :', key = 4):
        image236 = Image.open("Images/Modelisation/image236.JPG")  # resum_class_avm
        st.image(image236)
        st.info('Aucune am√©lioration pour le Lin Reg.  \n  Le Gradient Boosting s‚Äôam√©liore tr√®s (trop) l√©g√®rement avec l‚Äôajout des m√©tadonn√©es.  \  Pas d‚Äôam√©lioration ni d√©t√©rioration pour le Decision Tree Regressor.  \n  En r√©sum√© : les mod√®les ne sont pas meilleurs avec les m√©tadonn√©s')

    



    # les tableaux de r√©sultats pour chaque mod√®le et analyse
    # r√©sum√© et conclusion 







elif choose == "A vous de jouer !":
    st.image(image2)
    st.markdown('<h2 style="color: black;">A vous de tester le mod√®le </h2>', unsafe_allow_html=True)





    # mettre une zone de texte pour entrer un commentaire
    txt = ""
    txt = st.text_area("Entrez votre commentaire, et nous allons voir si le mod√®le pr√©dit correctement votre sentiment :", value = "Entrez ici votre commentaire")
     
    
    # faire passer √† la fonction TOUTPROPRE ce comm
    stemmer = FrenchStemmer()  
    # fonction stemming qui retrouve la racine pour chaque mot de mots, une liste (de mots) pass√©e en param√®tre.
    # on va l'appliquer ensuite √† notre liste de mots noirs, puis √† notre commentaire
    def stemming(liste): 
        sortie = [] 
        stemmer = FrenchStemmer() 
        for l in liste: 
            rac = stemmer.stem(l) 
            if rac not in sortie: 
                sortie.append(rac) 
                return sortie  


### cr√©ation de notre liste de mots n√©gatifs #
# liste non exhaustive !#

    mots_neg = ['annul', 'de√ßu', 'decevant', 'catastrophe','casse','mecontent','misere', 'galere',
              'fraude','avocat','arnaque','argent','remboursement','non','nul','manquant',
              'retard','desastre','erreur','errone','vol','vide','abime','perdu','delai',
              'amertune', 'abattement', 'absurdite', 'accablement', 'affliction', 'angoisse', 'assombrissement',
              'austerite', 'agitation', 'agressivite', 'aigreur', 'animosite', 'anxiete', 'agacement',
              'cher', 'couter', 'crainte', 'chagrin', 'colere', 'consternation', 'courroux', 'critique', 
              'contradiction', 'crainte', 'cruaute',
              'deranger', 'dependre', 'desoler', 'difficile', 'decouragement', 'degout', 'depression', 
              'desabusement', 'desenchantement','desesperance', 'desolation', 'douleur', 'depit', 'doute', 'desarme',
              'ennui', 'eplorement', 'ebullition', 'effervescence', 'emportement', 'etroitesse','exasperation', 
              'excitation', 'excede',  'embetement', 'embarras', 'etourdi', 'enervement',
              'froideur', 'folie', 'facherie', 'fulminant', 'fureur', 'frustration', 'frousse', 'fermete', 'faiblesse',
              'grossi√®rete',
              'haine', 'hargne', 'honte', 'humiliation', 'hautain',
              'impossible', 'inconscience', 'indelicatesse', 'indifference', 'insensibilite',  
              'inquietude', 'impatience', 'indignation', 'irascibilite', 'irritabilite', 'irrationalite', 'impuissant',
              'long', 'laideur', 'lassitude', 'lourdeur',
              'mal', 'malheureusement',  'mais', 'mauvais','mauvaise', 'marre', 'machiavelisme', 'maladresse', 'malaise',
              'malheur','maussaderie', 'mecontentement', 'mefiance','melancolie','moche', 'mochete', 'monotonie',
              'morosite', 'moquerie', 'mechancete', 'menti',
              'neanmoins', 'negatif', 'navrement', 'niais', 'nigaud', 'noirceur',
              'orgueil','pauvrete', 'peine', 'platitude', 'petit', 'peu', 'peur', 'presumer', 'prejuger' ,'pretention', 'probl√®me',
              'rage', 'ressentiment', 'rogne', 'rudesse', 'resignation',
              'sagacite', 'severite', 'sombreur', 'souci', 'souffrance', 'stupidite', 
              'susceptibilit√©', 'superiorite', 'sottise','tristesse', 'vengeance', 'violence', 'vulgarite'
              'voleur','voleurs','escroc','reclamation', 'extremement','deception','decu','de√ßu','bizarre','facture',
              'incomplete','fuir','deconseiller','deception','fuyez','desoeuvrant','deplorable','abominable', 'cauchemar']

    # on passe notre liste dans la fonction stemming pour n'avoir que les racines des mots n√©gatifs
    # ne passe pas sur StreamLit
    # mots_neg = stemming(mots_neg)

    
    # fonction qui va permettre de compter le nb de mots n√©gatifs contenus dans le commentaire 
    
    def mot_noir(texte):
        mot = word_tokenize(texte.lower(), language = 'french')
        nb = 0
        for m in mot:
            #m = stemmer.stem(m)
            if m in mots_neg :
                nb += 1
        return nb
    
    
    stop_words = set(stopwords.words('french'))
    stop_words.update(["?", "!", ".", ",", ":", ";", "-", "--", "...","‚Ç¨"]) 
    stop_words.update(['\"'])  
    stop_words.update(["\'"])
    stop_words.update(['"'])  
    stop_words.update(["'"])
    stop_words.update(["\‚Äô"])
    stop_words.update(["‚Äô"])
    stop_words.update(['1','2','3','4','5','6','7','8','9','0'])
    stop_words.update(['a', "j'ai", 'si',"n'ai",'√ßa','ca','cela', "n'est",])
    stop_words.update(['donc', "c'est", 'plus',"tout",'tr√®s',"fois",'rien', 'ni','jour','l√†', "qu'il", 'fait'])  
    stop_words.update(['avoir', "quand", 'comme',"faire",'car','alors','chez','suite','apr√®s'])  
    stop_words.update(['cet', "cette", 'leurs',"leur", 'meme', 'apres','etait'])  
    stop_words.update(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'])  

    # importation du tokenizer
    from nltk.tokenize import TweetTokenizer  
    tokenizer = TweetTokenizer()


    # d√©finition de la fct pour enlever les mots "vides" du commentaire
    # garantie une meilleure perf de la vectorisation
    # on doit d√©couper notre texte en mot (sinon √ßa fait lettre par lettre)
    # puis renvoyer un str (ici parole) pour que la vectorisation puisse se faire 
    # on ajoute un espace entre les mots sinon cestpastr√®slisible

    def stop_words_filtering(texte) :
        # on coupe en mot la phrase que l'on veut analyser
        phrase = word_tokenize(texte.lower(), language = 'french')
        tokens = []
        for mot in phrase:
            if mot not in stop_words:
                parole = ""
                tokens.append(mot)
                for t in tokens:
                    parole += str(t)
                    parole += ' '
        return parole
    
    
    
    def toutpropre(x):
    ## 1e partie : cr√©ation des m√©tadonn√©es:
      long_com = len(str(x))  # longueur du commentaire

      # nb points exclamation / interrogation
      pt_exc = re.compile(r"\?+")
      pt_int = re.compile(r"!+")
      interr = len(pt_int.findall(str(x)))
      exclam = len(pt_exc.findall(str(x)))
      points = interr + exclam
  
      # suite majuscule : on conserve la variable nb_maj car plus li√©e √† la note
      maj = re.compile(r"[A-Z]")
      majmot = re.compile(r"[A-Z]{2,}")
  
      nb_maj = len(maj.findall(str(x)))
      mot_maj = len(majmot.findall(str(x)))

 
     
      neg = mot_noir(x)   # compte le nb de mots n√©gatifs dans le commentaire

      # 2nde partie : on nettoie notre commentaire : enl√®ve ponctuation , maj, mots vide:
      x_OK = stop_words_filtering(x)    
      x_OK = x_OK.lower()      # minuscule
      x_OK = unidecode(x_OK)    # On enl√®ve les accents
      x_OK = re.sub("[^a-zA-Z]", " ", x_OK)   # On enl√®ve la ponctuation
      x_OK = re.sub('\s+',' ',x_OK)        # On enl√®ve les espaces en trop

      # 3e partie : on va cr√©er un DF avec ces m√©tadonn√©es et le commentaire nettoy√© :
 
      df_x = pd.DataFrame(list(zip([long_com],[neg],[interr], [exclam], [points] , [mot_maj],[nb_maj],[x_OK] )), 
                      columns = ['long_com', 'mots_neg', 'trouve_int', 'trouve_exc','nb_pt', 'mot_maj', 'nb_maj','com_OK'])
      return df_x
  

  # Chargement du mod√®le (√† faire sur l'app Streamlit)
    pipeLR = load("Modeles/pipeLR.joblib") 
    pipeDT = load("\Projet DS\Modeles/pipeDT.joblib") 
    pipeGBC = load('Modeles/pipeGBC.joblib') 

    pipeLRM = load('Modeles/pipeLRM.joblib') 
    pipeDTM = load('Modeles/pipeDTM.joblib') 
    pipeGBCM = load('Modeles/pipeGBCM.joblib') 

    pipeRL = load('Modeles/pipeRL.joblib') 
    pipeDTR = load('Modeles/pipeDTR.joblib') 
    pipeGBR = load('Modeles/pipeGBR.joblib') 

    pipeRLm = load('Modeles/pipeRLm.joblib') 
    pipeDTRm = load('Modeles/pipeDTRm.joblib') 
    pipeGBRm = load('Modeles/pipeGBRm.joblib') 
       
   
    # faire choisir le mod√®le pour pr√©diction
    option = st.selectbox(
     'Quel mod√®le voulez-vous tester ?',
     ('R√©gression Logisitique', 
      'Decision Tree Classifier', 
      'Gradient Boosting Classifier',
      'R√©gression Lin√©aire',
      'Decision Tree Regressor',
      'Gradient Boosting Regressor'))
    st.write('\n')
    

    radio = st.radio("Avec ou sans m√©tadonn√©es ?", ('Avec M√©tadonn√©es', 'Sans M√©tadonn√©es'))
    


    st.write('Vous avez choisi :', option, radio)
    st.write('\n')
    
    if option == 'R√©gression Logisitique' and radio == 'Sans M√©tadonn√©es':
        mod = pipeLR
    if option == 'Decision Tree Classifier' and radio == 'Sans M√©tadonn√©es':
        mod = pipeDT
    if option == 'Gradient Boosting Classifier' and radio == 'Sans M√©tadonn√©es':
        mod = pipeGBC

    if option == 'R√©gression Logisitique' and radio == 'Avec M√©tadonn√©es':
        mod = pipeLRM
    if option == 'Decision Tree Classifier' and radio == 'Avec M√©tadonn√©es':
        mod = pipeDTM
    if option == 'Gradient Boosting Classifier' and radio == 'Avec M√©tadonn√©es':
        mod = pipeGBCM
        
        
    if option == 'R√©gression Lin√©aire' and radio == 'Sans M√©tadonn√©es':
        mod = pipeRL
    if option == 'Decision Tree Regressor' and radio == 'Sans M√©tadonn√©es':
        mod = pipeDTR
    if option == 'Gradient Boosting Regressor' and radio == 'Sans M√©tadonn√©es':
        mod = pipeGBR

    if option == 'R√©gression Lin√©aire' and radio == 'Avec M√©tadonn√©es':
        mod = pipeRLm
    if option == 'Decision Tree Regressor' and radio == 'Avec M√©tadonn√©es':
        mod = pipeDTRm
    if option == 'Gradient Boosting Regressor' and radio == 'Avec M√©tadonn√©es':
        mod = pipeGBRm
        
        
        
         
    # donner la pr√©diction pour la CLASSIFICATION
    if option == 'R√©gression Logisitique' or option == 'Decision Tree Classifier' or option == 'Gradient Boosting Classifier':
        if txt == "Entrez ici votre commentaire":
            resultc = "non"
        else:
            resultc = mod.predict(toutpropre(txt))[0]

    
        if resultc == 0:
            st.error("--> Client **m√©content** : la note pr√©dite mauvaise : **1, 2 ou 3**     :disappointed:")
        if resultc == 1:
            st.success("  -->    Client **satisfait**, la note pr√©dite sera √©lev√©e : **4 ou 5**      :sunglasses:  ")
        if resultc == "non":
                pass
        
        
    # donner la pr√©diction pour la REGRESSION
    if option == 'R√©gression Lin√©aire' or option == 'Decision Tree Regressor' or option == 'Gradient Boosting Regressor':
        if txt == "Entrez ici votre commentaire":
            resultr = "non"
        else:
            resultr = mod.predict(toutpropre(txt))[0]

        resultr = np.round(resultr,0)
        if resultr <= 0:
            resultr = 1
            if resultr > 5:
                resultr =5
        
        if resultr == 1:
            st.error("   -->     Client **tr√®s m√©content** : la note pr√©dite est **1**     üòñ")
        if resultr == 2:
            st.error("   -->     Client **m√©content** : la note pr√©dite est **2**     :üôÅ")
        if resultr == 3:
            st.info("   -->     Client **mitig√©** : la note pr√©dite est **3**      üòë")
        if resultr == 4:
            st.success("   -->     Client **satisfait** : la note pr√©dite est **4**      üôÇ")
        if resultr == 5:
             st.success("  -->    Client **tr√®s satisfait**, la note pr√©dite est **5**      ü•∞ ")
        if resultr == "non":
             pass
        
        
#################################################################################    

elif choose == "Importantes Features":
    st.image(image2)   
    st.markdown('<h2 style="color: black;">Importantes Features</h2>', unsafe_allow_html=True)
    st.write('\n ')   
    st.write('\n ')   
    st.write('Apr√®s des essais de visualisation sur le Bag of Word, nous voudrions voir quels sont les mots qui contribuent le plus √† la construction du mod√®le. Nous utilisons ici le **Logistic Regression avec m√©tadonn√©es.**')
    if st.checkbox('Afficher Top 40 des mots avec contribution Positive'):
        image270 = Image.open("Images/image270.png")
        st.image(image270) 
    st.write('\n')     
    st.write('\n')    
    if st.checkbox('Afficher Top 40 des mots avec contribution N√©gative'):
        image271 = Image.open("Images/image271.png")
        st.image(image271)  
    st.write('\n')
    st.write('\n')    
    
    
    if st.checkbox('Afficher Top 40 des mots les plus contributeurs, en positif comme en n√©gatif'):
        image260 = Image.open("Images/image260.JPG")
        st.image(image260) 
        st.write('\n')
        st.info("Les mots les plus contributeurs en positif sont les mots **‚Äúsatisfait‚Äù**, **‚Äúparfait‚Äù** et **‚Äúrapide‚Äù**.  \n  Les mots les plus contributeurs c√¥t√© n√©gatif sont **‚Äùmois‚Äù**, **‚Äúarnaque‚Äù**, et **‚Äúmauvaise‚Äù**.  \n  Le mot ‚Äúmois‚Äù est √©tonnant... Mais quand on lit quelques commentaires, on s'aper√ßoit que certains clients ont attendu tr√®s longtemps leur colis")
        st.write('\n')
    st.write('\n')    
    st.write('\n')    
    if st.checkbox('Afficher Importantes Features pour le mod√®le Gradient Boosting avec m√©tadonn√©es'):
        image261 = Image.open("Images/image261.JPG")
        image262 = Image.open("Images/image262.JPG")

        title_container = st.container()
        col1, col2 = st.columns([1, 1.2])
        with title_container:
            with col1:
                st.image(image261, width = 350)
            with col2:
                st.image(image262, width = 440)
        st.write('\n')
        st.info('La m√©tadonn√©e "mot _neg" est la plus contributrice.La contribution est quasi-nulle pour les autres m√©tadonn√©es.')



#################################################################################    
elif choose == "Conclusion":
    st.image(image2)   
    st.markdown('<h2 style="color: black;">Conclusion / Perspectives</h2>', unsafe_allow_html=True)
    st.write('\n ')   
    st.write('\n ')   
    
    
    if st.checkbox('R√©capitulatif et choix du meilleur mod√®le test√© :'):
        st.write('En r√©sum√©, nous retenons la mod√©lisation par classification : elle est efficace et donne de bons r√©sultats.  \n  Et dans ce type de mod√®le en particulier, la r√©gression Logistique sans m√©tadonn√©es semble la plus fiable et la plus s√ªre : **la pr√©diction est s√ªre √† 90%** !')
        st.write('\n ')
        st.write('La r√©gression lin√©aire est moins adapt√©e pour ce type de donn√©es : nous aurions s√ªrement d√ª r√©√©quilibrer nos groupes avant de mod√©liser, ou augmenter la taille de nos donn√©es, afin de pouvoir avoir des groupes plus √©quilibr√©s.')
        st.write('\n ')
        st.write("Enfin, nous remarquons que quelque soit le mod√®le consid√©r√©e, l‚Äôajout de m√©tadonn√©es n‚Äôest pas synonyme d‚Äôam√©lioration de la pr√©diction : soit nous devons am√©liorer l‚Äô√©laboration de nos m√©tadonn√©es (en choisir d‚Äôautres, augmenter leur nombre, ne choisir que certaines qui seraient les plus contributrices‚Ä¶) soit nous pouvons simplement nous fier √† la vectorisation de notre commentaire pour obtenir le plus fiablement notre pr√©diction ! ")
    st.write('\n ')
    st.write('\n ')    

    if st.checkbox('Pr√©dictions sur un fichier "neuf" :'):
        st.write('Nous avons mis en place une ‚Äúmini-base‚Äù de commentaires fictifs, et avons tent√© une pr√©diction par quelques-uns des mod√®les vus plus haut. ')
        image250 = Image.open("Images/image250.JPG")
        image251 = Image.open("Images/image251.JPG")
        st.write('\n ')
        st.image(image250, width = 950) 
        st.image(image251, width = 450) 
        st.info('On pourrait penser que Gradient Boosting Classifier fonctionne avec la m√©tadonn√©e ‚Äúlong_com‚Äù : c‚Äôest √† dire qu‚Äôau plus le commentaire est long, au plus il reconna√Æt le c√¥t√© n√©gatif du commentaire. Sauf qu‚Äôavec ou sans cette m√©tadonn√©e, il fonctionne de la m√™me fa√ßon. Si on exclut ces commentaires longs (8e , 11e, 21e), il passe √† c√¥t√© de ces pr√©dictions.  \n  ‚Üí Je penche plut√¥t vers les mots dans le commentaire et donc la matrice de vectorisation : plus elle est riche, au plus le Gradient Boosting Classifier est performant. ')
        
    st.write('\n ')
    st.write('\n ')  

    if st.checkbox('Pour aller plus loin :'):
        st.write('Nous avons r√©ussi √† pr√©dire la note donn√©e √† partir du commentaire du client.  \n  Et maintenant ?')
        st.write('1. En application directe, nous pourrions aller tester notre mod√®le sur d‚Äôautres sites, pour d‚Äôautres enseignes   \n  ‚Üí En extrayant les commentaires de site qui ne sont pas forc√©ment des des sites de ‚Äúnotes‚Äù (ex TrustPilot), nous pourrions savoir √† partir du commentaire du client la fa√ßon dont il nous note et pouvoir √©tablir une vision globale de l‚Äôenseigne √† travers l‚Äôensemble des canaux d‚Äôexpression des clients : FaceBook / Insta / Avis V√©rifi√©s / Messenger / Pages Jaunes ‚Ä¶')
        st.write('En fonction de cette note pr√©dite, nous pouvons √©tablir un plan de r√©ponses aux clients les plus m√©contents   \n  ‚Üí il est **indispensable** de r√©pondre aux clients et en priorit√© √† ceux les plus m√©contents, sous peine qu‚Äôils partent √† la concurrence, et encore pire, qu‚Äôils parlent de leur mauvaise exp√©rience √† son entourage.')
        st.write('\n ')
        st.write("**Un client satisfait en parle √† 3 autres. Un m√©content, √† 11**")
        st.write('\n')
        st.write("3. Toujours en fonction de la note pr√©dite, et en continuant notre analyse du texte : il serait tr√®s int√©ressant de pouvoir creuser sur la raison du m√©contentement du client   \n  ‚Üí pour trouver les 3 sujets sur lesquels travailler :  \n  - √©tablir un constat ‚Äúpourquoi √ßa ne marche pas‚Äù  \n   - simplifier le process ‚Äúmoi, en tant que client, je souhaite ‚Ä¶‚Äù  \n  - √©tablir un plan d‚Äôactions ‚Äú3 mesures pro-client‚Äù  \n  - mesurer et # soit p√©renniser le plan d‚Äôaction   # soit r√©adapter le plan d‚Äôactions ")
        st.write('\n')
        st.write('\n')
        
        title_container = st.container()
        col1, col2 = st.columns([1, 2.1])
        with title_container:
            with col2:
                st.image(image1, width = 200)

    st.write('\n ')
    st.write('\n ')  



#################################################################################
elif choose == "Contact":
    st.image(image2)   
    st.markdown('<h2 style="color: black;">Contact</h2>', unsafe_allow_html=True)
    
    
    st.markdown(""" <style> .font {
    font-size:35px ; font-family: 'Calibri'; color: #ff8100;} 
    </style> """, unsafe_allow_html=True)
    
    st.markdown('<p class="font">Qui suis-je ? </p>', unsafe_allow_html=True)
    
    
    title_container0 = st.container()
    col1, col2 = st.columns([1, 5])
    imagecd = Image.open("Images/photoCDU.PNG")
    with title_container0:
        with col1:
            st.image(imagecd, width=100)
        with col2:
            st.markdown('<h3 style="color: orange;">Caroline Dumoulin</h3>', unsafe_allow_html=True)
        
    st.write('\n')    
    st.write("Experte en optimisation des process internes et donn√©es avec pour objectif **la satisfaction client**‚Äã")
    st.write("20 ans d'exp√©rience dont 6 ann√©es en tant que responsable Exp√©rience client / Analyse ‚ÄãSatisfaction Client / Retail‚Äã")
    st.write(" Optimisation du traitement des donn√©es, analyse des indicateurs et pr√©conisations ‚Äãd'actions correctrices.‚Äã")
    st.write("Mon projet : **accompagner votre entreprise ‚Äãdans le d√©veloppement de la satisfaction de vos clients**")
  


    st.markdown('<p class="font">Me contacter </p>', unsafe_allow_html=True)
    
    with st.form(key='columns_in_form2',clear_on_submit=True): #set clear_on_submit=True so that the form will be reset/cleared once it's submitted
        #st.write('Please help us improve!')
        Name=st.text_input(label='Votre nom') #Collect user feedback
        Email=st.text_input(label='Email') #Collect user feedback
        Message=st.text_input(label='Message') #Collect user feedback
        submitted = st.form_submit_button('Envoyer')
        if submitted:
            st.write('Merci pour votre int√©r√™t. Je vous recontacte dans les 24h :) ')
